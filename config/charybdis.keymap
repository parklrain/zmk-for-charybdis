#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <180>;
    flavor = "tap-preferred";
};

/ {
    chosen { zmk,battery = &vbatt; };

    vbatt: vbatt {
        compatible = "zmk,battery-nrf-vddh";
        label = "VBATT";
    };

    behaviors {
        lhht: left-hand-hold-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
            global-quick-tap;
            hold-trigger-key-positions = <6 7 8 9 19 18 33 34 35 39 40 41 5 15 25 26 16 17 27 28 29>;
        };

        rhht: rhht {
            compatible = "zmk,behavior-hold-tap";
            label = "RHHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
            global-quick-tap;
            hold-trigger-key-positions = <4 3 2 1 13 14 0 12 24 38 37 36 10 11 20 21 22 23 30 31 32>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lgui {
            bindings = <&kp LWIN>;
            key-positions = <14 13>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lshft {
            bindings = <&kp LSHIFT>;
            key-positions = <13 12>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <12 11>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lalt {
            bindings = <&kp LALT>;
            key-positions = <11 10>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rgui {
            bindings = <&kp RWIN>;
            key-positions = <15 16>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rshft {
            bindings = <&kp RSHIFT>;
            key-positions = <16 17>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rctrl {
            bindings = <&kp LCTRL>;
            key-positions = <17 18>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_ralt {
            bindings = <&kp LALT>;
            key-positions = <19 18>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lshft_lctrl {
            bindings = <&kp LC(LSHFT)>;
            key-positions = <13 12 11>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lshft_lalt {
            bindings = <&kp LA(LSHFT)>;
            key-positions = <13 12 10>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lctrl_lalt {
            bindings = <&kp LC(LALT)>;
            key-positions = <12 11 10>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lctrl_lwin {
            bindings = <&kp LC(LEFT_WIN)>;
            key-positions = <12 11 10 13>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rshft_rctrl {
            bindings = <&kp LC(RSHFT)>;
            key-positions = <16 17 18>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rshft_ralt {
            bindings = <&kp LA(RIGHT_SHIFT)>;
            key-positions = <16 17 19>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rctrl_ralt {
            bindings = <&kp LC(LALT)>;
            key-positions = <17 18 19>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rctrl_rwin {
            bindings = <&kp LC(RIGHT_WIN)>;
            key-positions = <16 17 18 19>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <4 14>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <3 13>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_multiply {
            bindings = <&kp ASTRK>;
            key-positions = <2 12>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_divide {
            bindings = <&kp SLASH>;
            key-positions = <1 11>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <14 24>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <13 23>;
            layers = <1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <23 21>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <23 24>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lclk {
            bindings = <&mkp LCLK>;
            key-positions = <26 27>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rclk {
            bindings = <&mkp RCLK>;
            key-positions = <26 28>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_mclk {
            bindings = <&mkp MB3>;
            key-positions = <26 28 27>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_scroll {
            bindings = <&mo 6>;
            key-positions = <28 27>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_lang {
            bindings = <&kp RALT>;
            key-positions = <16 18>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_hanja {
            bindings = <&kp RCTRL>;
            key-positions = <17 19>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_caps {
            bindings = <&kp CAPS>;
            key-positions = <11 13>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_prev {
            bindings = <&mkp MB4>;
            key-positions = <16 26>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_next {
            bindings = <&mkp MB5>;
            key-positions = <27 17>;
            layers = <0 1 2 3 5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_Layer {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |
            //          | ESC | SPC | TAB |   | ENT | BKSP  |

            bindings = <
&kp Q  &kp W  &kp E      &kp R        &kp T        &kp Y        &kp U            &kp I      &kp O    &kp P
&kp A  &kp S  &kp D      &kp F        &kp G        &kp H        &kp J            &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C      &kp V        &kp B        &kp N        &kp M            &kp COMMA  &kp DOT  &kp SLASH
              &lt 1 ESC  &lt 2 SPACE  &lt 3 TAB    &lt 1 ENTER  &lt 2 BACKSPACE
            >;

            trackball-bindings = <&tmv_coarse>;
            label = "QWER";
        };

        Num_Layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &kp HOME   &kp END    &kp INSERT  &kp DEL    &kp BSPC
&kp SQT    &kp N4  &kp N5   &kp N6  &kp EQUAL    &kp PLUS   &kp LEFT   &kp UP      &kp RIGHT  &kp ENTER
&kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &kp MINUS  &kp COMMA  &kp DOWN    &kp ASTRK  &kp SLASH
                   &kp DOT  &kp N0  &kp MINUS    &trans     &trans
            >;

            label = "NUM";
        };

        Sym_Layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC     &kp HOME   &kp END   &kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK
&kp DQT    &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS     &kp PG_UP  &kp LEFT  &kp UP           &kp RIGHT       &kp ENTER
&kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE     &kp PG_DN  &trans    &kp DOWN         &trans          &trans
                     &kp LPAR   &kp RPAR   &kp UNDER    &trans     &trans
            >;

            label = "SYM";
        };

        Fun_Layer {
            bindings = <
&kp LC(Q)  &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)    &trans  &kp F7  &kp F8  &kp F9  &kp F12
&kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)    &trans  &kp F1  &kp F2  &kp F3  &kp F10
                      &trans     &trans     &trans       &trans  &trans
            >;

            label = "FUN";
        };

        Sys_Layer {
            bindings = <
&bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4    &bt BT_CLR  &bt BT_CLR_ALL  &out OUT_BLE  &out OUT_USB  &out OUT_TOG
&trans        &trans        &trans        &trans        &trans          &trans      &trans          &trans        &trans        &sys_reset
&trans        &trans        &trans        &trans        &trans          &trans      &trans          &trans        &trans        &bootloader
                            &trans        &trans        &trans          &trans      &trans
            >;

            label = "SYS";
        };

        Mouse_Layer {
            bindings = <
&trans  &trans  &trans     &trans  &trans       &trans  &trans     &trans     &trans     &trans
&trans  &trans  &trans     &trans  &trans       &trans  &trans     &mkp MCLK  &trans     &trans
&trans  &trans  &trans     &trans  &trans       &trans  &mkp LCLK  &mo 6      &mkp RCLK  &trans
                &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;

            label = "MSE";
        };

        Scroll_Layer {
            bindings = <
&trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans
                &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;

            trackball-bindings = <&tsl>;//滚轮层
            label = "SCL";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Sys_Layer {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };
};
